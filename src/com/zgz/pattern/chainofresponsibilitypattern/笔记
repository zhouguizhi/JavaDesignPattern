什么是链
1、链是一系列节点的集合。
2.、链的各节点可灵活拆分再重组

职责链模式
使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系，
将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理他为止


角色
抽象处理者角色(Handler)：定义出一个处理请求的接口。如果需要，
接口可以定义 出一个方法以设定和返回对下家的引用。这个角色通常由一个Java抽象类或者Java接口实现。
具体处理者角色(ConcreteHandler)：具体处理者接到请求后，可以选择将请求处理掉，
或者将请求传给下家。由于具体处理者持有对下家的引用，因此，如果需要，具体处理者可以访问下家


应用
申请聚餐费用的管理，申请聚餐费用的大致流程一般是，由申请人先填写申请单，然后交给领导审批，
如果申请批准下来，领导会通知申请人审批通过，然后申请人去财务领取费用，
如果没有批准下来，领导会通知申请人审批未通过，此事也就此作罢。
不同级别的领导，对于审批的额度是不一样的，比如，项目经理只能审批500元以内的申请；
部门经理能审批1000元以内的申请；而总经理可以审核任意额度的申请
看v2版本

当某人提出聚餐费用申请的请求后，该请求会经由项目经理、部门经理、
总经理之中的某一位领导来进行相应的处理，但是提出申请的人并不知道最终会由谁来处理他的请求，
一般申请人是把自己的申请提交给项目经理，或许最后是由总经理来处理他的请求。
申请人只要直接与项目经理交互就可以，其余的工作在黑盒中，究竟流程是怎样的，
最后是由谁审批通过的，申请人无需关心

职责链灵活在哪
1. 改变内部的传递规则
在内部，项目经理完全可以跳过人事部到那一关直接找到总经理。
每个人都可以去动态地指定他的继任者。
2. 可以从职责链任何一关开始。
如果项目经理不在，可以直接去找部门经理，责任链还会继续，没有影响。
3.用与不用的区别
不用职责链的结构，我们需要和公司中的每一个层级都发生耦合关系。
如果反映在代码上即使我们需要在一个类中去写上很多丑陋的if….else语句。
如果用了职责链，相当于我们面对的是一个黑箱，我们只需要认识其中的一个部门，然后让黑箱内部去负责传递就好了

纯的与不纯的责任链模式
一个纯的责任链模式要求一个具体的处理者对象只能在两个行为中选择一个：一是承担责任，而是把责任推给下家。不允许出现某一个具体处理者对象在承担了一部分责任后又 把责任向下传的情况。
在一个纯的责任链模式里面，一个请求必须被某一个处理者对象所接收；在一个不纯的责任链模式里面，一个请求可以最终不被任何接收端对象所接收。
纯的责任链模式的实际例子很难找到，一般看到的例子均是不纯的责任链模式的实现

责任链模式在Android中的引用
1:view的touch事件
2:okHttp网络请求中的


